import Head from "next/head";
import Nav from "@/components/nav";
import { Avatar, Badge, Button, Image, Link, Tooltip } from "@nextui-org/react";
import Loading from "@/components/loading";
import Footer from "@/components/footer";
import { motion } from "framer-motion";
import { TypeAnimation } from "react-type-animation";
import { useEffect, useState } from "react";
import { getPresence } from "@/handlers/api/presence";
import { Activity } from "@/types/interfaces/Activity";
import { namesSequence } from "@/utils/data/names";
import { FiCalendar, FiClock } from "react-icons/fi";
export default function Home() {
  const [activity, setActivity] = useState<Activity>({
    presence: "offline",
    status: null,
  });
  const [time, setTime] = useState<string>("");
  const [date, setDate] = useState<string>("");

  const [loading, setLoading] = useState(true);

  useEffect(() => {
    getPresence(activity, setActivity, setLoading);
  }, [loading]);

  const getStatusColor = (tooltip?: boolean) => {
    switch (activity.presence) {
      case "online":
        return "success";
      case "idle":
        return "warning";
      case "dnd":
        return "error";

      default:
        return "default";
    }
  };

  const getStatusName = () => {
    switch (activity.presence) {
      case "online":
        return "Online";
      case "idle":
        return "Idle";
      case "dnd":
        return "Do Not Disturb";

      default:
        return "Offline";
    }
  };

  const getISTTime = () => {
    const date = new Date();
    const utc = date.getTime() + date.getTimezoneOffset() * 60000;
    const ist = new Date(utc + 3600000 * 5.5);

    let currentTime = ist.toLocaleTimeString("en-US", {
      hour: "numeric",
      minute: "numeric",
      second: "numeric",
      hour12: false,
    });

    let currentDate = ist.toLocaleDateString("en-US", {
      month: "long",
      day: "numeric",
    });

    setTime(currentTime);
    setDate(currentDate);
  };

  useEffect(() => {
    setInterval(() => {
      getISTTime();
    }, 1000);
  }, []);

  return !loading ? (
    <>
      <Head>
        <title>Aktindo</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex justify-center items-center h-screen tracking-wides">
        <Nav active="home" />

        <div className="hero mb-20">
          <motion.div
            initial={{ opacity: 0 }}
            whileInView={{ opacity: 1 }}
            viewport={{ once: true }}
            transition={{ duration: 1, ease: "easeInOut" }}
          >
            <div className="flex justify-start place-items-center">
              <Tooltip
                content={getStatusName()}
                rounded
                color={getStatusColor()}
                placement="left"
              >
                <Avatar
                  className="mr-3 w-32 h-32"
                  src={"/pfp.png"}
                  color={getStatusColor()}
                  bordered
                  borderWeight="bold"
                />
              </Tooltip>

              <div className="mt-3 max-w-2xl text-left">
                <p className="md:text-3xl text-2xl font-medium tracking-normal">
                  Hi there!
                </p>
                <p className="md:text-4xl text-3xl tracking-normal opacity-90 font-semibold">
                  I&apos;m{" "}
                  <TypeAnimation
                    speed={45}
                    sequence={namesSequence}
                    wrapper="span"
                    cursor={true}
                    className="text-base-primary"
                  />
                </p>
                {activity.status ? (
                  <p className="text-lg opacity-50 font-fira">
                    {activity.status}
                  </p>
                ) : (
                  ""
                )}
              </div>
            </div>
            <div className="grid justify-center max-w-2xl mt-5">
              <p className="md:text-xl font-inter text-lg opacity-80 tracking-normal">
                A 14y/o self-taught developer, aspiring to always learn new
                things in this evolving world. However most of the time, I lack
                the brain cells to do so :/
                <br />
                <br />
                Also, feel free to get in touch anytime! I crave to hear new
                ideas and how they can shape the internet.
              </p>
            </div>
          </motion.div>

          <div className="grid justify-start opacity-90 max-w-2xl mt-5">
            <p className="text-xl font-fira flex items-center">
              <span className="mr-2 flex items-center">
                <FiCalendar size="20" />
              </span>
              {date} in New Delhi, India
            </p>
            <p className="text-xl font-fira flex items-center">
              <span className="mr-2 flex items-center">
                <FiClock size="20" />
              </span>
              At {time}
            </p>
          </div>
        </div>
      </div>
      <Footer />
    </>
  ) : (
    <Loading />
  );
}
